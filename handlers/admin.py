import string
from random import choices

from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from asyncpg.exceptions import UniqueViolationError

from routers import admin_router
import keyboards as keys
from states import Admin
from loader import base


@admin_router.message(Command('admin'))
async def open_admin_panel(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await state.clear()
    await msg.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keys.admin_menu)


# ====================
# –ö–∞—Ä—Ç—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
# ====================


async def open_card(msg: Message, card_id: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"""
    card = await base.get_card_by_id(card_id)
    card_item = await base.get_all_items_by_card(card_id)
    msg_text = f'*_{card["card_name"]}:_*\n\n{card["card_content"]}'
    await msg.answer(msg_text,
                     reply_markup=await keys.consumer_card_action(
                         card['card_name'],
                         card['card_id'],
                         card_item
                     ),
                     parse_mode='MarkdownV2')


@admin_router.message(F.text == 'üìù –ö–∞—Ä—Ç—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π')
async def consumer_card_menu(msg: Message):
    """–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ä—Ç–∞–º–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"""
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keys.consumer_card_menu)


@admin_router.callback_query(F.data.startswith('card_'))
async def catch_card_action(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–∞—Ä—Ç–∞–º"""
    await callback.message.delete()

    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–∞—Ä—Ç
    if callback.data == 'card_current':
        card_list = await base.get_all_cards()
        await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç—É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è:',
                                      reply_markup=await keys.consumer_card_list(card_list))

    # –í—ã–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    elif callback.data.startswith('card_show_'):
        await open_card(callback.message, callback.data.removeprefix('card_show_'))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
    elif callback.data == 'card_add':

        await state.set_state(Admin.add_new_card_name)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã:', reply_markup=keys.cancel_button)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∫ –∫–∞—Ä—Ç–µ
    elif callback.data.startswith('card_add-item_'):

        await state.set_state(Admin.add_new_card_item_name)

        # –ò —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏–º ID –∫–∞—Ä—Ç—ã –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç
        await state.set_data({'card_id': callback.data.removeprefix('card_add-item_')})
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–Ω–∫—Ç–∞:', reply_markup=keys.cancel_button)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    else:
        await state.set_state(Admin.remove_card)
        await state.set_data({'card_id_for_remove': callback.data.removeprefix('card_remove_')})
        await callback.message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=keys.confirm)


async def open_item(msg: Message, item_id: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É–Ω–∫—Ç"""
    item = await base.get_item_by_id(item_id)
    msg_text = f'*_{item["item_name"]}:_*\n\n{item["item_content"]}'
    await msg.answer(msg_text, reply_markup=await keys.item_action(item), parse_mode='MarkdownV2')


@admin_router.callback_query(F.data.startswith('item_'))
async def show_item(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –∫–∞—Ä—Ç—ã"""
    await callback.message.delete()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç
    if callback.data.startswith('item_show_'):
        await open_item(callback.message, callback.data.removeprefix('item_show_'))

    # –£–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    elif callback.data.startswith('item_remove_'):

        await state.set_state(Admin.remove_item)
        await state.set_data({'item_for_remove_id': callback.data.removeprefix('item_remove_')})
        await callback.message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=keys.confirm)


@admin_router.callback_query(Admin.remove_card, F.data.in_(['yes', 'no']))
async def card_remove_confirm(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    await callback.message.delete()
    card_for_remove_id = (await state.get_data())['card_id_for_remove']
    await state.clear()
    if callback.data == 'yes':
        await base.remove_card(card_for_remove_id)
        await callback.message.answer('–ö–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
        await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keys.consumer_card_menu)
    else:
        await open_card(callback.message, card_for_remove_id)


@admin_router.callback_query(Admin.remove_item, F.data.in_(['yes', 'no']))
async def item_remove_confirm(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–∞"""
    await callback.message.delete()
    item_for_remove_id = (await state.get_data())['item_for_remove_id']
    await state.clear()
    if callback.data == 'yes':
        item_for_remove = await base.get_item_by_id(item_for_remove_id)
        await base.remove_item(item_for_remove_id)
        await callback.message.answer('–ü—É–Ω–∫—Ç —É–¥–∞–ª–µ–Ω')
        await open_card(callback.message, item_for_remove['card_id'])
    else:
        await open_item(callback.message, item_for_remove_id)


@admin_router.message(Admin.add_new_card_name, F.text != '–û—Ç–º–µ–Ω–∞')
async def catch_name_for_new_card(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    await state.set_data({'card_name': msg.md_text})
    await state.set_state(Admin.add_new_card_content)
    await msg.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã:')


@admin_router.message(Admin.add_new_card_content, F.text != '–û—Ç–º–µ–Ω–∞')
async def catch_content_for_new_card(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
    new_card_id = ''.join(choices(string.digits + string.ascii_letters, k=8))
    try:
        await base.add_new_card(
            card_name=(await state.get_data())['card_name'],
            card_id=new_card_id,
            card_content=msg.md_text
        )
        await state.clear()
        await msg.answer('–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', reply_markup=keys.admin_menu)
        await open_card(msg, new_card_id)
    except UniqueViolationError:
        await state.clear()
        await msg.answer('–ö–∞—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=keys.admin_menu)


@admin_router.message(Admin.add_new_card_item_name, F.text != '–û—Ç–º–µ–Ω–∞')
async def catch_name_for_new_item(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞"""
    await state.update_data({'item_name': msg.md_text})
    await state.set_state(Admin.add_new_card_item_content)
    await msg.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—É–Ω–∫—Ç–∞:')


@admin_router.message(Admin.add_new_card_item_content, F.text != '–û—Ç–º–µ–Ω–∞')
async def catch_content_for_new_item(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞"""
    new_item_id = ''.join(choices(string.digits + string.ascii_letters, k=8))
    item_data = await state.get_data()
    await base.add_new_item(
        item_name=item_data['item_name'],
        item_id=new_item_id,
        item_content=msg.md_text,
        card_id=item_data['card_id']
    )
    await state.clear()
    await msg.answer('–ü—É–Ω–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', reply_markup=keys.admin_menu)
    await open_card(msg, item_data['card_id'])


@admin_router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞"""
    await state.clear()
    await msg.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keys.admin_menu)
