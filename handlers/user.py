from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from routers import users_router
import keyboards as keys
from loader import base, bot
from states import User
from config import ADMINS


@users_router.callback_query(F.data == 'start')
async def after_sub_check(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –±–æ—Ç ‚öñ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=keys.main_menu)


@users_router.message(Command('start'))
async def start_func(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—á–∞–ª"""
    await state.clear()
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –±–æ—Ç ‚öñ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=keys.main_menu)


# ====================
# –ö–∞—Ä—Ç—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –∏ –∑–∞–∫–æ–Ω—ã
# ====================


@users_router.callback_query(F.data == 'open_card_list')
async def open_card_list(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"""
    await callback.message.delete()
    card_list = await base.get_all_cards()
    await callback.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç—É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è:',
                                  reply_markup=await keys.consumer_card_list_for_user(card_list))


@users_router.message(F.text == '‚öñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')
async def open_card_list(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"""
    card_list = await base.get_all_cards()
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç—É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è:',
                     reply_markup=await keys.consumer_card_list_for_user(card_list))


@users_router.callback_query(F.data.startswith('u_card_view_'))
async def open_card(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"""
    await callback.message.delete()
    card_id = callback.data.removeprefix('u_card_view_')
    card = await base.get_card_by_id(card_id)
    card_item = await base.get_all_items_by_card(card_id)
    msg_text = f'*_{card["card_name"]}:_*\n\n{card["card_content"]}'
    await callback.message.answer(msg_text,
                                  reply_markup=await keys.consumer_card_items(card_item),
                                  parse_mode='MarkdownV2')


@users_router.callback_query(F.data.startswith('u_item_view_'))
async def open_item(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç –∫–∞—Ä—Ç—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è"""
    await callback.message.delete()
    item = await base.get_item_by_id(callback.data.removeprefix('u_item_view_'))
    msg_text = f'*_{item["item_name"]}:_*\n\n{item["item_content"]}'
    await callback.message.answer(msg_text, reply_markup=await keys.item_back(item['card_id']), parse_mode='MarkdownV2')


@users_router.message(F.text == 'üìö –ó–∞–∫–æ–Ω—ã –∏ –ø—Ä–∞–≤–∞')
async def open_law_list(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω–æ–≤"""
    law_list = await base.get_all_laws()
    msg_text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–æ–Ω—ã/–ø—Ä–∞–≤–∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:\n\n'
    for la in law_list:
        msg_text += f'*_{la["law_name"]} \-_* _{la["law_description"]}_\n\n'
    await msg.answer(msg_text, reply_markup=await keys.law_list_user(law_list), parse_mode='MarkdownV2')


@users_router.callback_query(F.data == 'open_law_list')
async def open_law_list(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω–æ–≤"""
    await callback.message.delete()
    law_list = await base.get_all_laws()
    msg_text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–æ–Ω—ã/–ø—Ä–∞–≤–∞ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è:\n\n'
    for la in law_list:
        msg_text += f'*_{la["law_name"]} \-_* _{la["law_description"]}_\n\n'
    await callback.message.answer(msg_text,
                                  reply_markup=await keys.law_list_user(law_list),
                                  parse_mode='MarkdownV2')


@users_router.callback_query(F.data.startswith('u_law_view_'))
async def open_law(callback: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–æ–Ω"""
    await callback.message.delete()
    law = await base.get_law_by_id(callback.data.removeprefix('u_law_view_'))
    msg_text = f'*_{law["law_name"]}:_*\n\n{law["law_content"]}'
    await callback.message.answer(msg_text, reply_markup=keys.law_back, parse_mode='MarkdownV2')


# ====================
# –û–±—Ä–∞—â–µ–Ω–∏—è
# ====================


@users_router.message(F.text == 'üÜò –ñ–∞–ª–æ–±–∞ / –≤–æ–ø—Ä–æ—Å')
async def start_complaint_make(msg: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"""
    await state.set_state(User.complaint)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:', reply_markup=keys.cancel_button_user)


@users_router.message(User.complaint, F.text != 'üö´ –û—Ç–º–µ–Ω–∞')
async def catch_complaint_text(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.clear()
    complaint_id = await base.add_new_complaint(
        username=msg.from_user.username,
        user_id=msg.from_user.id,
        text=msg.text
    )

    # –ò –æ–ø–æ–≤–µ—Å—Ç–∏–º –∞–¥–º–∏–Ω–æ–≤
    for a in ADMINS:
        await bot.send_message(a, '–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞/–≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

    await msg.answer(f'‚úÖ –í–∞—à–∞ –∂–∞–ª–æ–±–∞/–≤–æ–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)\n'
                     f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è: <b><i>{complaint_id}</i></b>',
                     reply_markup=keys.main_menu)


@users_router.message(F.text == 'üö´ –û—Ç–º–µ–Ω–∞')
async def cancel_func(msg: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞"""
    await state.clear()
    await msg.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keys.main_menu)
